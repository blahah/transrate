#!/usr/bin/env ruby

require 'trollop'
require 'transrate'
require 'csv'
require 'bindeps'
require 'ruby-prof'

opts = Trollop::options do
  version Transrate::VERSION::STRING.dup
  banner <<-EOS

  Transrate v#{Transrate::VERSION::STRING.dup} by Richard Smith-Unna <rds45@cam.ac.uk>

  DESCRIPTION:
  Analyse a de-novo transcriptome assembly using three kinds of metrics:

  1. contig-based
  2. read-mapping (if --left and --right are provided)
  3. reference-based (if --reference is provided)

  Bug reports and feature requests at:
  http://github.com/blahah/transrate

  USAGE:
  transrate <options>

  EXAMPLES:
  # just check dependencies and install any that are missing
  transrate --install-deps
  # contig metrics only
  transrate --assembly contigs.fa
  # contig and reference-based metrics with 8 threads
  transrate --assembly contigs.fa --reference Athaliana_protein.fa --threads 8
  # contig and read-based metrics for two assemblies with 32 threads
  transrate --assembly one.fa,two.fa --left l.fq --right r.fq --threads 32

  OPTIONS:

  EOS
  opt :assembly, "assembly file(s) in FASTA format, comma-separated",
      :type => String
  opt :reference, "reference proteome file in FASTA format",
      :type => String
  opt :genome, "reference genome in FASTA format",
      :type => String
  opt :left, "left reads file in FASTQ format",
      :type => String
  opt :right, "right reads file in FASTQ format",
      :type => String
  opt :insertsize, "mean insert size",
      :default => 200,
      :type => Integer
  opt :insertsd, "insert size standard deviation",
      :default => 50,
      :type => Integer
  opt :threads, "number of threads to use",
      :default => 8,
      :type => Integer
  opt :evalue, "minimum evalue for alignment to the genome",
      :default => 1e-5,
      :type => Float
  opt :min_percent_id, "minimum percentage identity for genome alignment",
      :default => 90.0,
      :type => Float
  opt :maxIntron, "maximum intron size for genome alignment",
      :default => 750000,
      :type => Integer
  opt :outfile, "prefix filename to use for CSV output",
      :default => 'transrate'
  opt :loglevel, "the amount of information to print. " +
                 "one of [error, info, warn, debug]",
      :default => 'info'
  opt :install_deps, "install any missing dependencies"
  opt :profile, "debug option: profile the code as it runs"
end

gem_dir = Gem.loaded_specs['transrate'].full_gem_path
gem_deps = File.join(gem_dir, 'deps', 'deps.yaml')

def require_blat blatdep
  blat = YAML.load_file(blatdep)['blat']
  d = Bindeps::Dependency.new('blat', blat['binaries'],blat['version'],blat['url'],false)
  unless d.all_installed?
    puts "binary dependency blat not installed"
    puts "it will now be downloaded and installed"
    install_blat d
  end
end

def install_blat blat_dependency
  Dir.mktmpdir do |tmpdir|
    Dir.chdir tmpdir do
      blat_dependency.download
      `chmod +x blat`
      blat_dependency.install 'blat'
    end
  end
end


if opts.install_deps
  puts "Checking dependencies"
  blat_dep = File.join(gem_dir, 'deps', 'blat.yaml')
  Bindeps.require gem_deps
  require_blat blat_dep
  puts "All dependencies installed"
  exit
else
  missing = Bindeps.missing gem_deps
  if missing.length > 0
    puts "Dependencies are missing:"
    missing.each do |dep|
      puts "  - #{dep}"
    end
    puts "To install all missing dependencies, run `transrate --install-deps`"
    exit(1)
  end
end

if opts.assembly
  opts.assembly.split(',').each do |assembly_file|
    unless File.exist?(assembly_file)
      raise IOError.new "Assembly fasta file does not exist: #{assembly_file}"
    end
  end
else
  raise ArgumentError.new "Option --assembly must be specified. " +
                          "Try --help for help."
end

if opts.reference && !File.exist?(opts.reference)
  raise IOError.new "Reference fasta file does not exist: #{opts.reference}"
end

if opts.genome && !File.exist?(opts.genome)
  raise IOError.new "Reference genome fasta file does not exist: #{opts.reference}"
end

if opts.left and opts.right
  if opts.left.split(",").length != opts.right.split(",").length
    msg = "Please provide the same number of left reads as right reads"
    raise ArgumentError.new(msg)
  end
  opts.left.split(",").zip(opts.right.split(",")).each do |left,right|
    if !File.exist?(left)
      raise IOError.new "Left read fastq file does not exist: #{left}"
    end
    if !File.exist?(right)
      raise IOError.new "Right read fastq file does not exist: #{right}"
    end
  end
end

if opts.profile
  logger.info "Starting profiler"
  RubyProf.start
end

def pretty_print_hash hash, width
  hash.map do |k, v|
    # show as float if there are any decimal places
    if v.to_f.round(2).to_s.split('.').last.to_i > 0
      v = v.to_f.round(2)
    end
    if v.is_a? Float
      v = v.round(2)
    end
    pad = (width - (k.to_s.length + v.to_s.length))
    pad = [pad, 0].max
    logger.info "#{k.to_s.split('_').join(' ')}" +
    "#{" " * pad}" +
    "#{v}"
  end
end

include Transrate

unless %w[error info warn debug].include? opts.loglevel
  raise "Loglevel #{opts.loglevel} is not valid. " +
        "It must be one of: error, info, warn, debug."
end

logger.level = Yell::Level.new opts.loglevel.to_sym

logger.info "Loading reference dataset"

r = opts.reference ? Assembly.new(opts.reference) : nil
g = opts.genome ? Assembly.new(opts.genome) : nil
report_width = 35

# loop through the assemblies, storing their outputs in an array of hashes
all = []
opts.assembly.split(',').each do |assembly|

  logger.info "Loading assembly: #{assembly}"

  a = Assembly.new assembly
  transrater = Transrater.new(a, r, g,
                              left: opts.left,
                              right: opts.right,
                              insertsize: opts.insertsize,
                              insertsd: opts.insertsd,
                              threads: opts.threads,
                              evalue: opts.evalue,
                              percent_threshold: opts.min_percent_id,
                              maxIntron: opts.maxIntron)


  logger.info "Analysing assembly: #{assembly}"

  contig_results = {}

  logger.info "Calculating contig metrics..."
  t0 = Time.now
  contig_results = transrater.assembly_metrics.basic_stats
  contig_results.merge! transrater.assembly.contig_metrics.results
  if contig_results
    logger.info "Contig metrics:"
    logger.info "-" *  report_width
    pretty_print_hash(contig_results, report_width)
  end

  logger.info "Contig metrics done in #{Time.now - t0} seconds"

  read_results = {}

  if (opts.left && opts.right)
    logger.info "Calculating read diagnostics..."
    t0 = Time.now
    read_results = transrater.read_metrics(opts.left,
                                           opts.right).read_stats

    if read_results
      logger.info "Read mapping metrics:"
      logger.info "-" *  report_width
      pretty_print_hash(read_results, report_width)
    end

    logger.info "Read metrics done in #{Time.now - t0} seconds"
  else
    logger.info "No reads provided, skipping read diagnostics"
  end

  comparative_results={}
  alignment_results={}

  if opts.reference
    logger.info "Calculating comparative metrics..."
    t0 = Time.now
    comparative_metrics = transrater.comparative_metrics
    comparative_results = comparative_metrics.comp_stats

    if comparative_results
      logger.info "Comparative metrics:"
      logger.info "-" *  report_width
      pretty_print_hash(comparative_results, report_width)
    end

    logger.info "Comparative metrics done in #{Time.now - t0} seconds"

    logger.info "-" * report_width
    score = transrater.assembly_score
    unless score.nil?
      logger.info "OVERALL SCORE: #{score.to_f.round(2) * 100}%"
      logger.info "-" * report_width
    end
  else
    logger.info "No reference provided, skipping comparative diagnostics"
  end

  # write contig metrics to file for each contig
  outfile = "#{opts.outfile}_#{File.basename(assembly)}_contigs.csv"
  logger.info "Writing contig metrics for each contig to #{outfile}"
  # have option to turn off, default on
  first=true
  CSV.open(outfile, 'wb') do |csv|
    a.each do |name, contig|
      basic_metrics = {:contig_name => name}.merge(contig.basic_metrics)
      if opts.reference
        comp_metrics = contig.comparative_metrics
        basic_metrics.merge!(comp_metrics)
      end
      if (opts.left and opts.right)
        read_metrics = contig.read_metrics
        basic_metrics.merge!(read_metrics)
      end
      if first
        csv << basic_metrics.keys
        first = false
      end
      csv << basic_metrics.values
    end
  end

  if opts.genome
    logger.info "Calculating assembly alignment metrics..."
    t0 = Time.now
    ref_alignment = transrater.reference_alignment
    alignment_results = ref_alignment.genome_stats
    if alignment_results
      logger.info "Assembly alignment metrics:"
      logger.info "-" * report_width
      pretty_print_hash(alignment_results, report_width)
    end
    # write all unaligned transcripts to fasta file for further analysis
    unaligned = 'unaligned_transcripts.fa'
    logger.info "Writing unaligned transcripts to #{unaligned}"
    transrater.reference_alignment.write_unaligned unaligned
    `rm #{unaligned}` unless `wc -l #{unaligned}`.split[0].to_i > 1
    logger.info "Assembly alignment metrics done in #{Time.now - t0} seconds"
    logger.info "-" * report_width
  else
    logger.info "No reference genome provided, skipping assembly alignment"
  end

  all << contig_results.
           merge(read_results).
           merge(comparative_results).
           merge(alignment_results).
           merge({ :assembly => assembly })

end

# write out all resuls to .csv
outfile = "#{opts.outfile}_assemblies.csv"
logger.info "Writing analysis results to #{outfile}"
CSV.open(outfile, 'wb') do |file|
  keys = all[0].keys
  keys.delete(:assembly)
  head = [:assembly] + keys
  file << head
  all.each do |row|
    file << head.map { |x| row[x] }
  end
end

if opts.profile
  logger.info "Writing profiling results to transrate_profile.txt"
  result = RubyProf.stop
  printer = RubyProf::FlatPrinter.new(result)
  printer.print(File.open('transrate_profile.txt', 'w'))
end
