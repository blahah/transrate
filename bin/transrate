#!/usr/bin/env ruby

require 'trollop'
require 'transrate'

opts = Trollop::options do
  version Transrate::VERSION::STRING.dup
  banner <<-EOS

Transrate v#{Transrate::VERSION::STRING.dup} by Richard Smith <rds45@cam.ac.uk>

DESCRIPTION:
Analyse a de-novo transcriptome
assembly using three kinds of metrics:

1. contig-based
2. read-mapping (if --left and --right are provided)
3. reference-based (if --reference is provided)

Bug reports and feature requests at:
http://github.com/blahah/transrate

USAGE:
transrate <options>

OPTIONS:

EOS
  opt :assembly, "assembly file in FASTA format", :required => true, :type => String
  opt :reference, "reference proteome file in FASTA format", :type => String
  opt :left, "left reads file in FASTQ format", :type => String
  opt :right, "right reads file in FASTQ format", :type => String
  opt :insertsize, "mean insert size",  :default => 200, :type => Integer
  opt :insertsd, "insert size standard deviation", :default => 50, :type => Integer
  opt :threads, "number of threads to use", :default => 8, :type => Integer
end

def pretty_print_hash hash, width
  hash.map{ |k, v| "#{k.to_s}#{" " * (width - (k.length + v.to_f.round(2).to_s.length))}#{v.to_f.round(2)}" }.join("\n")
end

include Transrate

a = Assembly.new opts.assembly
r = opts.reference ? Assembly.new(opts.reference) : nil 

transrater = Transrater.new(a, r, 
                            opts.left, 
                            opts.right,
                            opts.insertsize,
                            opts.insertsd,
                            opts.threads)

puts "\nAnalysing assembly: #{opts.assembly}\n\n"

report_width = 30

puts "Calculating contig metrics..."
t0 = Time.now
contig_results = transrater.assembly_metrics.basic_stats

if contig_results
  puts "\n"
  puts "Contig metrics:"
  puts "-" *  report_width
  puts pretty_print_hash(contig_results, report_width)
end

puts "Contig metrics done in #{Time.now - t0} seconds"

read_results = nil
if (opts.left && opts.right)
  puts "\ncalculating read diagnostics..."
  t0 = Time.now
  read_results = transrater.read_metrics(opts.left, opts.right).read_stats

  if read_results
    puts "\n"
    puts "Read mapping metrics:"
    puts "-" *  report_width
    puts pretty_print_hash(read_results, report_width)
  end

  puts "Read metrics done in #{Time.now - t0} seconds"
else
  puts "\nNo reads provided, skipping read diagnostics"
end

if opts.reference
  puts "\nCalculating comparative metrics..."
  t0 = Time.now
  comparative_metrics = transrater.comparative_metrics
  comparative_results = comparative_metrics.comp_stats

  if comparative_results
    puts "\n"
    puts "Comparative metrics:"
    puts "-" *  report_width
    puts pretty_print_hash(comparative_results, report_width)
  end

  puts "Comparative metrics done in #{Time.now - t0} seconds"
end

puts "\n"
puts "-" * report_width
score = transrater.assembly_score
unless score.nil?
  puts "OVERALL SCORE: #{score.to_f.round(2) * 100}%"
  puts "-" * report_width
end
